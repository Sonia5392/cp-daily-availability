name: Build and Publish Availability Dashboard

on:
  workflow_dispatch:
  schedule:
    - cron: "10 11 * * 1-5"  # Weekdays 11:10 UTC (~7:10 AM ET)

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Install Playwright runtime (no package.json needed)
      - name: Install Playwright package
        run: npm i playwright@1.47.0 --no-save

      # Cache browser binaries so runs stay fast
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-chromium-v1
          restore-keys: |
            pw-${{ runner.os }}-

      # Install Chromium for Playwright (stable choice on GitHub runners)
      - name: Install Chromium
        run: npx playwright install chromium

      # Publish a fallback JSON so the page never 404s, even if the checker fails
      - name: Prepare static site (fallback first)
        run: |
          mkdir -p site
          cp web/index.html site/index.html
          echo "[]" > site/availability.json

      # Run the checker; do not fail the job if it errors.
      # If availability.json exists, overwrite the fallback.
      - name: Run ChiliPiper check (non-fatal)
        run: |
          set +e
          node check-availability.cjs
          EXIT=$?
          if [ -f "availability.json" ]; then cp availability.json site/availability.json; fi
          if [ -d "debug" ]; then mkdir -p site/debug && cp -r debug/* site/debug/; fi
          # Don't fail the job on checker errors; keep publishing the site
          if [ $EXIT -ne 0 ]; then echo "Checker errored (exit $EXIT) â€” continuing with fallback JSON"; fi
          exit 0

      # Upload site/ as the Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
